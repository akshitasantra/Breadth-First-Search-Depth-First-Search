public LinkedHashSet BFS(Node start){
Queue<Node> q = new LinkedList<Node>();
LinkedHashSet<Node> seen = new LinkedHashSet<Node>();
q.add(start);
while(q.size() != 0){
Node current = q.remove();
seen.add(current);
for(Node n : graph.get(current)){
if(!seen.contains(n)){
q.add(n);
}
}
}
return seen;
}
public LinkedHashSet DFS(Node start){
Stack<Node> s = new Stack<Node>();
LinkedHashSet<Node> seen = new LinkedHashSet<Node>();
s.push(start);
while(s.size() != 0){
Node current = s.pop();
seen.add(current);
for(Node n : graph.get(current)){
if(!seen.contains(n)){
s.push(n);
}
}
}
return seen;
}